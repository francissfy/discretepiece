// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: discretepiece_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_discretepiece_5fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_discretepiece_5fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_discretepiece_5fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_discretepiece_5fmodel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace discretepiece {
class ModelProto;
class ModelProtoDefaultTypeInternal;
extern ModelProtoDefaultTypeInternal _ModelProto_default_instance_;
class ModelProto_DiscretePiece;
class ModelProto_DiscretePieceDefaultTypeInternal;
extern ModelProto_DiscretePieceDefaultTypeInternal _ModelProto_DiscretePiece_default_instance_;
class TrainerSpec;
class TrainerSpecDefaultTypeInternal;
extern TrainerSpecDefaultTypeInternal _TrainerSpec_default_instance_;
}  // namespace discretepiece
PROTOBUF_NAMESPACE_OPEN
template<> ::discretepiece::ModelProto* Arena::CreateMaybeMessage<::discretepiece::ModelProto>(Arena*);
template<> ::discretepiece::ModelProto_DiscretePiece* Arena::CreateMaybeMessage<::discretepiece::ModelProto_DiscretePiece>(Arena*);
template<> ::discretepiece::TrainerSpec* Arena::CreateMaybeMessage<::discretepiece::TrainerSpec>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace discretepiece {

enum TrainerSpec_ModelType : int {
  TrainerSpec_ModelType_BPE = 1
};
bool TrainerSpec_ModelType_IsValid(int value);
constexpr TrainerSpec_ModelType TrainerSpec_ModelType_ModelType_MIN = TrainerSpec_ModelType_BPE;
constexpr TrainerSpec_ModelType TrainerSpec_ModelType_ModelType_MAX = TrainerSpec_ModelType_BPE;
constexpr int TrainerSpec_ModelType_ModelType_ARRAYSIZE = TrainerSpec_ModelType_ModelType_MAX + 1;

const std::string& TrainerSpec_ModelType_Name(TrainerSpec_ModelType value);
template<typename T>
inline const std::string& TrainerSpec_ModelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrainerSpec_ModelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrainerSpec_ModelType_Name.");
  return TrainerSpec_ModelType_Name(static_cast<TrainerSpec_ModelType>(enum_t_value));
}
bool TrainerSpec_ModelType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrainerSpec_ModelType* value);
enum ModelProto_DiscretePiece_Type : int {
  ModelProto_DiscretePiece_Type_NORMAL = 1
};
bool ModelProto_DiscretePiece_Type_IsValid(int value);
constexpr ModelProto_DiscretePiece_Type ModelProto_DiscretePiece_Type_Type_MIN = ModelProto_DiscretePiece_Type_NORMAL;
constexpr ModelProto_DiscretePiece_Type ModelProto_DiscretePiece_Type_Type_MAX = ModelProto_DiscretePiece_Type_NORMAL;
constexpr int ModelProto_DiscretePiece_Type_Type_ARRAYSIZE = ModelProto_DiscretePiece_Type_Type_MAX + 1;

const std::string& ModelProto_DiscretePiece_Type_Name(ModelProto_DiscretePiece_Type value);
template<typename T>
inline const std::string& ModelProto_DiscretePiece_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ModelProto_DiscretePiece_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ModelProto_DiscretePiece_Type_Name.");
  return ModelProto_DiscretePiece_Type_Name(static_cast<ModelProto_DiscretePiece_Type>(enum_t_value));
}
bool ModelProto_DiscretePiece_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ModelProto_DiscretePiece_Type* value);
// ===================================================================

class TrainerSpec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:discretepiece.TrainerSpec) */ {
 public:
  inline TrainerSpec() : TrainerSpec(nullptr) {}
  virtual ~TrainerSpec();

  TrainerSpec(const TrainerSpec& from);
  TrainerSpec(TrainerSpec&& from) noexcept
    : TrainerSpec() {
    *this = ::std::move(from);
  }

  inline TrainerSpec& operator=(const TrainerSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainerSpec& operator=(TrainerSpec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TrainerSpec& default_instance();

  static inline const TrainerSpec* internal_default_instance() {
    return reinterpret_cast<const TrainerSpec*>(
               &_TrainerSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrainerSpec& a, TrainerSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainerSpec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainerSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrainerSpec* New() const final {
    return CreateMaybeMessage<TrainerSpec>(nullptr);
  }

  TrainerSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrainerSpec>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TrainerSpec& from);
  void MergeFrom(const TrainerSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrainerSpec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "discretepiece.TrainerSpec";
  }
  protected:
  explicit TrainerSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TrainerSpec_ModelType ModelType;
  static constexpr ModelType BPE =
    TrainerSpec_ModelType_BPE;
  static inline bool ModelType_IsValid(int value) {
    return TrainerSpec_ModelType_IsValid(value);
  }
  static constexpr ModelType ModelType_MIN =
    TrainerSpec_ModelType_ModelType_MIN;
  static constexpr ModelType ModelType_MAX =
    TrainerSpec_ModelType_ModelType_MAX;
  static constexpr int ModelType_ARRAYSIZE =
    TrainerSpec_ModelType_ModelType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ModelType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ModelType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ModelType_Name.");
    return TrainerSpec_ModelType_Name(enum_t_value);
  }
  static inline bool ModelType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ModelType* value) {
    return TrainerSpec_ModelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
    kInputFormatFieldNumber = 2,
    kModelPrefixFieldNumber = 3,
    kDeliminatorFieldNumber = 8,
    kInputSentenceSizeFieldNumber = 6,
    kModelTypeFieldNumber = 4,
    kVocabSizeFieldNumber = 5,
    kNumThreadsFieldNumber = 9,
    kShuffleInputSentenceFieldNumber = 7,
    kVocabularyOutputPieceScoreFieldNumber = 12,
    kNumSubIterationsFieldNumber = 10,
    kMaxDiscretepieceLengthFieldNumber = 11,
  };
  // repeated string input = 1;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  const std::string& input(int index) const;
  std::string* mutable_input(int index);
  void set_input(int index, const std::string& value);
  void set_input(int index, std::string&& value);
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, size_t size);
  std::string* add_input();
  void add_input(const std::string& value);
  void add_input(std::string&& value);
  void add_input(const char* value);
  void add_input(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input();
  private:
  const std::string& _internal_input(int index) const;
  std::string* _internal_add_input();
  public:

  // optional string input_format = 2;
  bool has_input_format() const;
  private:
  bool _internal_has_input_format() const;
  public:
  void clear_input_format();
  const std::string& input_format() const;
  void set_input_format(const std::string& value);
  void set_input_format(std::string&& value);
  void set_input_format(const char* value);
  void set_input_format(const char* value, size_t size);
  std::string* mutable_input_format();
  std::string* release_input_format();
  void set_allocated_input_format(std::string* input_format);
  private:
  const std::string& _internal_input_format() const;
  void _internal_set_input_format(const std::string& value);
  std::string* _internal_mutable_input_format();
  public:

  // optional string model_prefix = 3;
  bool has_model_prefix() const;
  private:
  bool _internal_has_model_prefix() const;
  public:
  void clear_model_prefix();
  const std::string& model_prefix() const;
  void set_model_prefix(const std::string& value);
  void set_model_prefix(std::string&& value);
  void set_model_prefix(const char* value);
  void set_model_prefix(const char* value, size_t size);
  std::string* mutable_model_prefix();
  std::string* release_model_prefix();
  void set_allocated_model_prefix(std::string* model_prefix);
  private:
  const std::string& _internal_model_prefix() const;
  void _internal_set_model_prefix(const std::string& value);
  std::string* _internal_mutable_model_prefix();
  public:

  // optional string deliminator = 8 [default = "#"];
  bool has_deliminator() const;
  private:
  bool _internal_has_deliminator() const;
  public:
  void clear_deliminator();
  const std::string& deliminator() const;
  void set_deliminator(const std::string& value);
  void set_deliminator(std::string&& value);
  void set_deliminator(const char* value);
  void set_deliminator(const char* value, size_t size);
  std::string* mutable_deliminator();
  std::string* release_deliminator();
  void set_allocated_deliminator(std::string* deliminator);
  private:
  const std::string& _internal_deliminator() const;
  void _internal_set_deliminator(const std::string& value);
  std::string* _internal_mutable_deliminator();
  public:

  // optional uint64 input_sentence_size = 6 [default = 0];
  bool has_input_sentence_size() const;
  private:
  bool _internal_has_input_sentence_size() const;
  public:
  void clear_input_sentence_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 input_sentence_size() const;
  void set_input_sentence_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_input_sentence_size() const;
  void _internal_set_input_sentence_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .discretepiece.TrainerSpec.ModelType model_type = 4 [default = BPE];
  bool has_model_type() const;
  private:
  bool _internal_has_model_type() const;
  public:
  void clear_model_type();
  ::discretepiece::TrainerSpec_ModelType model_type() const;
  void set_model_type(::discretepiece::TrainerSpec_ModelType value);
  private:
  ::discretepiece::TrainerSpec_ModelType _internal_model_type() const;
  void _internal_set_model_type(::discretepiece::TrainerSpec_ModelType value);
  public:

  // optional int32 vocab_size = 5 [default = 8000];
  bool has_vocab_size() const;
  private:
  bool _internal_has_vocab_size() const;
  public:
  void clear_vocab_size();
  ::PROTOBUF_NAMESPACE_ID::int32 vocab_size() const;
  void set_vocab_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vocab_size() const;
  void _internal_set_vocab_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_threads = 9 [default = 16];
  bool has_num_threads() const;
  private:
  bool _internal_has_num_threads() const;
  public:
  void clear_num_threads();
  ::PROTOBUF_NAMESPACE_ID::int32 num_threads() const;
  void set_num_threads(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_threads() const;
  void _internal_set_num_threads(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool shuffle_input_sentence = 7 [default = true];
  bool has_shuffle_input_sentence() const;
  private:
  bool _internal_has_shuffle_input_sentence() const;
  public:
  void clear_shuffle_input_sentence();
  bool shuffle_input_sentence() const;
  void set_shuffle_input_sentence(bool value);
  private:
  bool _internal_shuffle_input_sentence() const;
  void _internal_set_shuffle_input_sentence(bool value);
  public:

  // optional bool vocabulary_output_piece_score = 12 [default = true];
  bool has_vocabulary_output_piece_score() const;
  private:
  bool _internal_has_vocabulary_output_piece_score() const;
  public:
  void clear_vocabulary_output_piece_score();
  bool vocabulary_output_piece_score() const;
  void set_vocabulary_output_piece_score(bool value);
  private:
  bool _internal_vocabulary_output_piece_score() const;
  void _internal_set_vocabulary_output_piece_score(bool value);
  public:

  // optional int32 num_sub_iterations = 10 [default = 2];
  bool has_num_sub_iterations() const;
  private:
  bool _internal_has_num_sub_iterations() const;
  public:
  void clear_num_sub_iterations();
  ::PROTOBUF_NAMESPACE_ID::int32 num_sub_iterations() const;
  void set_num_sub_iterations(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_sub_iterations() const;
  void _internal_set_num_sub_iterations(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 max_discretepiece_length = 11 [default = 16];
  bool has_max_discretepiece_length() const;
  private:
  bool _internal_has_max_discretepiece_length() const;
  public:
  void clear_max_discretepiece_length();
  ::PROTOBUF_NAMESPACE_ID::int32 max_discretepiece_length() const;
  void set_max_discretepiece_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_discretepiece_length() const;
  void _internal_set_max_discretepiece_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TrainerSpec)
  // @@protoc_insertion_point(class_scope:discretepiece.TrainerSpec)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_prefix_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_deliminator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deliminator_;
  ::PROTOBUF_NAMESPACE_ID::uint64 input_sentence_size_;
  int model_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 vocab_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_threads_;
  bool shuffle_input_sentence_;
  bool vocabulary_output_piece_score_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_sub_iterations_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_discretepiece_length_;
  friend struct ::TableStruct_discretepiece_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ModelProto_DiscretePiece PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:discretepiece.ModelProto.DiscretePiece) */ {
 public:
  inline ModelProto_DiscretePiece() : ModelProto_DiscretePiece(nullptr) {}
  virtual ~ModelProto_DiscretePiece();

  ModelProto_DiscretePiece(const ModelProto_DiscretePiece& from);
  ModelProto_DiscretePiece(ModelProto_DiscretePiece&& from) noexcept
    : ModelProto_DiscretePiece() {
    *this = ::std::move(from);
  }

  inline ModelProto_DiscretePiece& operator=(const ModelProto_DiscretePiece& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelProto_DiscretePiece& operator=(ModelProto_DiscretePiece&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ModelProto_DiscretePiece& default_instance();

  static inline const ModelProto_DiscretePiece* internal_default_instance() {
    return reinterpret_cast<const ModelProto_DiscretePiece*>(
               &_ModelProto_DiscretePiece_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModelProto_DiscretePiece& a, ModelProto_DiscretePiece& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelProto_DiscretePiece* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelProto_DiscretePiece* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelProto_DiscretePiece* New() const final {
    return CreateMaybeMessage<ModelProto_DiscretePiece>(nullptr);
  }

  ModelProto_DiscretePiece* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelProto_DiscretePiece>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ModelProto_DiscretePiece& from);
  void MergeFrom(const ModelProto_DiscretePiece& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelProto_DiscretePiece* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "discretepiece.ModelProto.DiscretePiece";
  }
  protected:
  explicit ModelProto_DiscretePiece(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ModelProto_DiscretePiece_Type Type;
  static constexpr Type NORMAL =
    ModelProto_DiscretePiece_Type_NORMAL;
  static inline bool Type_IsValid(int value) {
    return ModelProto_DiscretePiece_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ModelProto_DiscretePiece_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ModelProto_DiscretePiece_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ModelProto_DiscretePiece_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ModelProto_DiscretePiece_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ModelProto_DiscretePiece_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPieceFieldNumber = 1,
    kScoreFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // optional string piece = 1;
  bool has_piece() const;
  private:
  bool _internal_has_piece() const;
  public:
  void clear_piece();
  const std::string& piece() const;
  void set_piece(const std::string& value);
  void set_piece(std::string&& value);
  void set_piece(const char* value);
  void set_piece(const char* value, size_t size);
  std::string* mutable_piece();
  std::string* release_piece();
  void set_allocated_piece(std::string* piece);
  private:
  const std::string& _internal_piece() const;
  void _internal_set_piece(const std::string& value);
  std::string* _internal_mutable_piece();
  public:

  // optional float score = 2;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // optional .discretepiece.ModelProto.DiscretePiece.Type type = 3 [default = NORMAL];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::discretepiece::ModelProto_DiscretePiece_Type type() const;
  void set_type(::discretepiece::ModelProto_DiscretePiece_Type value);
  private:
  ::discretepiece::ModelProto_DiscretePiece_Type _internal_type() const;
  void _internal_set_type(::discretepiece::ModelProto_DiscretePiece_Type value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ModelProto_DiscretePiece)
  // @@protoc_insertion_point(class_scope:discretepiece.ModelProto.DiscretePiece)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr piece_;
  float score_;
  int type_;
  friend struct ::TableStruct_discretepiece_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ModelProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:discretepiece.ModelProto) */ {
 public:
  inline ModelProto() : ModelProto(nullptr) {}
  virtual ~ModelProto();

  ModelProto(const ModelProto& from);
  ModelProto(ModelProto&& from) noexcept
    : ModelProto() {
    *this = ::std::move(from);
  }

  inline ModelProto& operator=(const ModelProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelProto& operator=(ModelProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ModelProto& default_instance();

  static inline const ModelProto* internal_default_instance() {
    return reinterpret_cast<const ModelProto*>(
               &_ModelProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ModelProto& a, ModelProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelProto* New() const final {
    return CreateMaybeMessage<ModelProto>(nullptr);
  }

  ModelProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ModelProto& from);
  void MergeFrom(const ModelProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModelProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "discretepiece.ModelProto";
  }
  protected:
  explicit ModelProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ModelProto_DiscretePiece DiscretePiece;

  // accessors -------------------------------------------------------

  enum : int {
    kPiecesFieldNumber = 1,
    kTrainerSpecFieldNumber = 2,
  };
  // repeated .discretepiece.ModelProto.DiscretePiece pieces = 1;
  int pieces_size() const;
  private:
  int _internal_pieces_size() const;
  public:
  void clear_pieces();
  ::discretepiece::ModelProto_DiscretePiece* mutable_pieces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::discretepiece::ModelProto_DiscretePiece >*
      mutable_pieces();
  private:
  const ::discretepiece::ModelProto_DiscretePiece& _internal_pieces(int index) const;
  ::discretepiece::ModelProto_DiscretePiece* _internal_add_pieces();
  public:
  const ::discretepiece::ModelProto_DiscretePiece& pieces(int index) const;
  ::discretepiece::ModelProto_DiscretePiece* add_pieces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::discretepiece::ModelProto_DiscretePiece >&
      pieces() const;

  // optional .discretepiece.TrainerSpec trainer_spec = 2;
  bool has_trainer_spec() const;
  private:
  bool _internal_has_trainer_spec() const;
  public:
  void clear_trainer_spec();
  const ::discretepiece::TrainerSpec& trainer_spec() const;
  ::discretepiece::TrainerSpec* release_trainer_spec();
  ::discretepiece::TrainerSpec* mutable_trainer_spec();
  void set_allocated_trainer_spec(::discretepiece::TrainerSpec* trainer_spec);
  private:
  const ::discretepiece::TrainerSpec& _internal_trainer_spec() const;
  ::discretepiece::TrainerSpec* _internal_mutable_trainer_spec();
  public:
  void unsafe_arena_set_allocated_trainer_spec(
      ::discretepiece::TrainerSpec* trainer_spec);
  ::discretepiece::TrainerSpec* unsafe_arena_release_trainer_spec();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ModelProto)
  // @@protoc_insertion_point(class_scope:discretepiece.ModelProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::discretepiece::ModelProto_DiscretePiece > pieces_;
  ::discretepiece::TrainerSpec* trainer_spec_;
  friend struct ::TableStruct_discretepiece_5fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrainerSpec

// repeated string input = 1;
inline int TrainerSpec::_internal_input_size() const {
  return input_.size();
}
inline int TrainerSpec::input_size() const {
  return _internal_input_size();
}
inline void TrainerSpec::clear_input() {
  input_.Clear();
}
inline std::string* TrainerSpec::add_input() {
  // @@protoc_insertion_point(field_add_mutable:discretepiece.TrainerSpec.input)
  return _internal_add_input();
}
inline const std::string& TrainerSpec::_internal_input(int index) const {
  return input_.Get(index);
}
inline const std::string& TrainerSpec::input(int index) const {
  // @@protoc_insertion_point(field_get:discretepiece.TrainerSpec.input)
  return _internal_input(index);
}
inline std::string* TrainerSpec::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:discretepiece.TrainerSpec.input)
  return input_.Mutable(index);
}
inline void TrainerSpec::set_input(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:discretepiece.TrainerSpec.input)
  input_.Mutable(index)->assign(value);
}
inline void TrainerSpec::set_input(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:discretepiece.TrainerSpec.input)
  input_.Mutable(index)->assign(std::move(value));
}
inline void TrainerSpec::set_input(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:discretepiece.TrainerSpec.input)
}
inline void TrainerSpec::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:discretepiece.TrainerSpec.input)
}
inline std::string* TrainerSpec::_internal_add_input() {
  return input_.Add();
}
inline void TrainerSpec::add_input(const std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:discretepiece.TrainerSpec.input)
}
inline void TrainerSpec::add_input(std::string&& value) {
  input_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:discretepiece.TrainerSpec.input)
}
inline void TrainerSpec::add_input(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:discretepiece.TrainerSpec.input)
}
inline void TrainerSpec::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:discretepiece.TrainerSpec.input)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrainerSpec::input() const {
  // @@protoc_insertion_point(field_list:discretepiece.TrainerSpec.input)
  return input_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrainerSpec::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:discretepiece.TrainerSpec.input)
  return &input_;
}

// optional string input_format = 2;
inline bool TrainerSpec::_internal_has_input_format() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrainerSpec::has_input_format() const {
  return _internal_has_input_format();
}
inline void TrainerSpec::clear_input_format() {
  input_format_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrainerSpec::input_format() const {
  // @@protoc_insertion_point(field_get:discretepiece.TrainerSpec.input_format)
  return _internal_input_format();
}
inline void TrainerSpec::set_input_format(const std::string& value) {
  _internal_set_input_format(value);
  // @@protoc_insertion_point(field_set:discretepiece.TrainerSpec.input_format)
}
inline std::string* TrainerSpec::mutable_input_format() {
  // @@protoc_insertion_point(field_mutable:discretepiece.TrainerSpec.input_format)
  return _internal_mutable_input_format();
}
inline const std::string& TrainerSpec::_internal_input_format() const {
  return input_format_.Get();
}
inline void TrainerSpec::_internal_set_input_format(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  input_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrainerSpec::set_input_format(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  input_format_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:discretepiece.TrainerSpec.input_format)
}
inline void TrainerSpec::set_input_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  input_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:discretepiece.TrainerSpec.input_format)
}
inline void TrainerSpec::set_input_format(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  input_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:discretepiece.TrainerSpec.input_format)
}
inline std::string* TrainerSpec::_internal_mutable_input_format() {
  _has_bits_[0] |= 0x00000001u;
  return input_format_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrainerSpec::release_input_format() {
  // @@protoc_insertion_point(field_release:discretepiece.TrainerSpec.input_format)
  if (!_internal_has_input_format()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return input_format_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrainerSpec::set_allocated_input_format(std::string* input_format) {
  if (input_format != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  input_format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_format,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:discretepiece.TrainerSpec.input_format)
}

// optional string model_prefix = 3;
inline bool TrainerSpec::_internal_has_model_prefix() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrainerSpec::has_model_prefix() const {
  return _internal_has_model_prefix();
}
inline void TrainerSpec::clear_model_prefix() {
  model_prefix_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrainerSpec::model_prefix() const {
  // @@protoc_insertion_point(field_get:discretepiece.TrainerSpec.model_prefix)
  return _internal_model_prefix();
}
inline void TrainerSpec::set_model_prefix(const std::string& value) {
  _internal_set_model_prefix(value);
  // @@protoc_insertion_point(field_set:discretepiece.TrainerSpec.model_prefix)
}
inline std::string* TrainerSpec::mutable_model_prefix() {
  // @@protoc_insertion_point(field_mutable:discretepiece.TrainerSpec.model_prefix)
  return _internal_mutable_model_prefix();
}
inline const std::string& TrainerSpec::_internal_model_prefix() const {
  return model_prefix_.Get();
}
inline void TrainerSpec::_internal_set_model_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  model_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TrainerSpec::set_model_prefix(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  model_prefix_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:discretepiece.TrainerSpec.model_prefix)
}
inline void TrainerSpec::set_model_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  model_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:discretepiece.TrainerSpec.model_prefix)
}
inline void TrainerSpec::set_model_prefix(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  model_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:discretepiece.TrainerSpec.model_prefix)
}
inline std::string* TrainerSpec::_internal_mutable_model_prefix() {
  _has_bits_[0] |= 0x00000002u;
  return model_prefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TrainerSpec::release_model_prefix() {
  // @@protoc_insertion_point(field_release:discretepiece.TrainerSpec.model_prefix)
  if (!_internal_has_model_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return model_prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrainerSpec::set_allocated_model_prefix(std::string* model_prefix) {
  if (model_prefix != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  model_prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:discretepiece.TrainerSpec.model_prefix)
}

// optional .discretepiece.TrainerSpec.ModelType model_type = 4 [default = BPE];
inline bool TrainerSpec::_internal_has_model_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrainerSpec::has_model_type() const {
  return _internal_has_model_type();
}
inline void TrainerSpec::clear_model_type() {
  model_type_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::discretepiece::TrainerSpec_ModelType TrainerSpec::_internal_model_type() const {
  return static_cast< ::discretepiece::TrainerSpec_ModelType >(model_type_);
}
inline ::discretepiece::TrainerSpec_ModelType TrainerSpec::model_type() const {
  // @@protoc_insertion_point(field_get:discretepiece.TrainerSpec.model_type)
  return _internal_model_type();
}
inline void TrainerSpec::_internal_set_model_type(::discretepiece::TrainerSpec_ModelType value) {
  assert(::discretepiece::TrainerSpec_ModelType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  model_type_ = value;
}
inline void TrainerSpec::set_model_type(::discretepiece::TrainerSpec_ModelType value) {
  _internal_set_model_type(value);
  // @@protoc_insertion_point(field_set:discretepiece.TrainerSpec.model_type)
}

// optional int32 vocab_size = 5 [default = 8000];
inline bool TrainerSpec::_internal_has_vocab_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrainerSpec::has_vocab_size() const {
  return _internal_has_vocab_size();
}
inline void TrainerSpec::clear_vocab_size() {
  vocab_size_ = 8000;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainerSpec::_internal_vocab_size() const {
  return vocab_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainerSpec::vocab_size() const {
  // @@protoc_insertion_point(field_get:discretepiece.TrainerSpec.vocab_size)
  return _internal_vocab_size();
}
inline void TrainerSpec::_internal_set_vocab_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  vocab_size_ = value;
}
inline void TrainerSpec::set_vocab_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vocab_size(value);
  // @@protoc_insertion_point(field_set:discretepiece.TrainerSpec.vocab_size)
}

// optional uint64 input_sentence_size = 6 [default = 0];
inline bool TrainerSpec::_internal_has_input_sentence_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrainerSpec::has_input_sentence_size() const {
  return _internal_has_input_sentence_size();
}
inline void TrainerSpec::clear_input_sentence_size() {
  input_sentence_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrainerSpec::_internal_input_sentence_size() const {
  return input_sentence_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrainerSpec::input_sentence_size() const {
  // @@protoc_insertion_point(field_get:discretepiece.TrainerSpec.input_sentence_size)
  return _internal_input_sentence_size();
}
inline void TrainerSpec::_internal_set_input_sentence_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  input_sentence_size_ = value;
}
inline void TrainerSpec::set_input_sentence_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_input_sentence_size(value);
  // @@protoc_insertion_point(field_set:discretepiece.TrainerSpec.input_sentence_size)
}

// optional bool shuffle_input_sentence = 7 [default = true];
inline bool TrainerSpec::_internal_has_shuffle_input_sentence() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TrainerSpec::has_shuffle_input_sentence() const {
  return _internal_has_shuffle_input_sentence();
}
inline void TrainerSpec::clear_shuffle_input_sentence() {
  shuffle_input_sentence_ = true;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool TrainerSpec::_internal_shuffle_input_sentence() const {
  return shuffle_input_sentence_;
}
inline bool TrainerSpec::shuffle_input_sentence() const {
  // @@protoc_insertion_point(field_get:discretepiece.TrainerSpec.shuffle_input_sentence)
  return _internal_shuffle_input_sentence();
}
inline void TrainerSpec::_internal_set_shuffle_input_sentence(bool value) {
  _has_bits_[0] |= 0x00000080u;
  shuffle_input_sentence_ = value;
}
inline void TrainerSpec::set_shuffle_input_sentence(bool value) {
  _internal_set_shuffle_input_sentence(value);
  // @@protoc_insertion_point(field_set:discretepiece.TrainerSpec.shuffle_input_sentence)
}

// optional string deliminator = 8 [default = "#"];
inline bool TrainerSpec::_internal_has_deliminator() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrainerSpec::has_deliminator() const {
  return _internal_has_deliminator();
}
inline void TrainerSpec::clear_deliminator() {
  deliminator_.ClearToDefault(::discretepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_deliminator_, GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TrainerSpec::deliminator() const {
  // @@protoc_insertion_point(field_get:discretepiece.TrainerSpec.deliminator)
  if (deliminator_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_deliminator_.get();
  return _internal_deliminator();
}
inline void TrainerSpec::set_deliminator(const std::string& value) {
  _internal_set_deliminator(value);
  // @@protoc_insertion_point(field_set:discretepiece.TrainerSpec.deliminator)
}
inline std::string* TrainerSpec::mutable_deliminator() {
  // @@protoc_insertion_point(field_mutable:discretepiece.TrainerSpec.deliminator)
  return _internal_mutable_deliminator();
}
inline const std::string& TrainerSpec::_internal_deliminator() const {
  return deliminator_.Get();
}
inline void TrainerSpec::_internal_set_deliminator(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  deliminator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline void TrainerSpec::set_deliminator(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  deliminator_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:discretepiece.TrainerSpec.deliminator)
}
inline void TrainerSpec::set_deliminator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  deliminator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:discretepiece.TrainerSpec.deliminator)
}
inline void TrainerSpec::set_deliminator(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  deliminator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:discretepiece.TrainerSpec.deliminator)
}
inline std::string* TrainerSpec::_internal_mutable_deliminator() {
  _has_bits_[0] |= 0x00000004u;
  return deliminator_.Mutable(::discretepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_deliminator_, GetArena());
}
inline std::string* TrainerSpec::release_deliminator() {
  // @@protoc_insertion_point(field_release:discretepiece.TrainerSpec.deliminator)
  if (!_internal_has_deliminator()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return deliminator_.ReleaseNonDefault(nullptr, GetArena());
}
inline void TrainerSpec::set_allocated_deliminator(std::string* deliminator) {
  if (deliminator != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  deliminator_.SetAllocated(nullptr, deliminator,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:discretepiece.TrainerSpec.deliminator)
}

// optional int32 num_threads = 9 [default = 16];
inline bool TrainerSpec::_internal_has_num_threads() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TrainerSpec::has_num_threads() const {
  return _internal_has_num_threads();
}
inline void TrainerSpec::clear_num_threads() {
  num_threads_ = 16;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainerSpec::_internal_num_threads() const {
  return num_threads_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainerSpec::num_threads() const {
  // @@protoc_insertion_point(field_get:discretepiece.TrainerSpec.num_threads)
  return _internal_num_threads();
}
inline void TrainerSpec::_internal_set_num_threads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  num_threads_ = value;
}
inline void TrainerSpec::set_num_threads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_threads(value);
  // @@protoc_insertion_point(field_set:discretepiece.TrainerSpec.num_threads)
}

// optional int32 num_sub_iterations = 10 [default = 2];
inline bool TrainerSpec::_internal_has_num_sub_iterations() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TrainerSpec::has_num_sub_iterations() const {
  return _internal_has_num_sub_iterations();
}
inline void TrainerSpec::clear_num_sub_iterations() {
  num_sub_iterations_ = 2;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainerSpec::_internal_num_sub_iterations() const {
  return num_sub_iterations_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainerSpec::num_sub_iterations() const {
  // @@protoc_insertion_point(field_get:discretepiece.TrainerSpec.num_sub_iterations)
  return _internal_num_sub_iterations();
}
inline void TrainerSpec::_internal_set_num_sub_iterations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  num_sub_iterations_ = value;
}
inline void TrainerSpec::set_num_sub_iterations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_sub_iterations(value);
  // @@protoc_insertion_point(field_set:discretepiece.TrainerSpec.num_sub_iterations)
}

// optional int32 max_discretepiece_length = 11 [default = 16];
inline bool TrainerSpec::_internal_has_max_discretepiece_length() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TrainerSpec::has_max_discretepiece_length() const {
  return _internal_has_max_discretepiece_length();
}
inline void TrainerSpec::clear_max_discretepiece_length() {
  max_discretepiece_length_ = 16;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainerSpec::_internal_max_discretepiece_length() const {
  return max_discretepiece_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrainerSpec::max_discretepiece_length() const {
  // @@protoc_insertion_point(field_get:discretepiece.TrainerSpec.max_discretepiece_length)
  return _internal_max_discretepiece_length();
}
inline void TrainerSpec::_internal_set_max_discretepiece_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  max_discretepiece_length_ = value;
}
inline void TrainerSpec::set_max_discretepiece_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_discretepiece_length(value);
  // @@protoc_insertion_point(field_set:discretepiece.TrainerSpec.max_discretepiece_length)
}

// optional bool vocabulary_output_piece_score = 12 [default = true];
inline bool TrainerSpec::_internal_has_vocabulary_output_piece_score() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TrainerSpec::has_vocabulary_output_piece_score() const {
  return _internal_has_vocabulary_output_piece_score();
}
inline void TrainerSpec::clear_vocabulary_output_piece_score() {
  vocabulary_output_piece_score_ = true;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool TrainerSpec::_internal_vocabulary_output_piece_score() const {
  return vocabulary_output_piece_score_;
}
inline bool TrainerSpec::vocabulary_output_piece_score() const {
  // @@protoc_insertion_point(field_get:discretepiece.TrainerSpec.vocabulary_output_piece_score)
  return _internal_vocabulary_output_piece_score();
}
inline void TrainerSpec::_internal_set_vocabulary_output_piece_score(bool value) {
  _has_bits_[0] |= 0x00000100u;
  vocabulary_output_piece_score_ = value;
}
inline void TrainerSpec::set_vocabulary_output_piece_score(bool value) {
  _internal_set_vocabulary_output_piece_score(value);
  // @@protoc_insertion_point(field_set:discretepiece.TrainerSpec.vocabulary_output_piece_score)
}

// -------------------------------------------------------------------

// ModelProto_DiscretePiece

// optional string piece = 1;
inline bool ModelProto_DiscretePiece::_internal_has_piece() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModelProto_DiscretePiece::has_piece() const {
  return _internal_has_piece();
}
inline void ModelProto_DiscretePiece::clear_piece() {
  piece_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModelProto_DiscretePiece::piece() const {
  // @@protoc_insertion_point(field_get:discretepiece.ModelProto.DiscretePiece.piece)
  return _internal_piece();
}
inline void ModelProto_DiscretePiece::set_piece(const std::string& value) {
  _internal_set_piece(value);
  // @@protoc_insertion_point(field_set:discretepiece.ModelProto.DiscretePiece.piece)
}
inline std::string* ModelProto_DiscretePiece::mutable_piece() {
  // @@protoc_insertion_point(field_mutable:discretepiece.ModelProto.DiscretePiece.piece)
  return _internal_mutable_piece();
}
inline const std::string& ModelProto_DiscretePiece::_internal_piece() const {
  return piece_.Get();
}
inline void ModelProto_DiscretePiece::_internal_set_piece(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ModelProto_DiscretePiece::set_piece(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  piece_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:discretepiece.ModelProto.DiscretePiece.piece)
}
inline void ModelProto_DiscretePiece::set_piece(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:discretepiece.ModelProto.DiscretePiece.piece)
}
inline void ModelProto_DiscretePiece::set_piece(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  piece_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:discretepiece.ModelProto.DiscretePiece.piece)
}
inline std::string* ModelProto_DiscretePiece::_internal_mutable_piece() {
  _has_bits_[0] |= 0x00000001u;
  return piece_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ModelProto_DiscretePiece::release_piece() {
  // @@protoc_insertion_point(field_release:discretepiece.ModelProto.DiscretePiece.piece)
  if (!_internal_has_piece()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return piece_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelProto_DiscretePiece::set_allocated_piece(std::string* piece) {
  if (piece != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  piece_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), piece,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:discretepiece.ModelProto.DiscretePiece.piece)
}

// optional float score = 2;
inline bool ModelProto_DiscretePiece::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ModelProto_DiscretePiece::has_score() const {
  return _internal_has_score();
}
inline void ModelProto_DiscretePiece::clear_score() {
  score_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float ModelProto_DiscretePiece::_internal_score() const {
  return score_;
}
inline float ModelProto_DiscretePiece::score() const {
  // @@protoc_insertion_point(field_get:discretepiece.ModelProto.DiscretePiece.score)
  return _internal_score();
}
inline void ModelProto_DiscretePiece::_internal_set_score(float value) {
  _has_bits_[0] |= 0x00000002u;
  score_ = value;
}
inline void ModelProto_DiscretePiece::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:discretepiece.ModelProto.DiscretePiece.score)
}

// optional .discretepiece.ModelProto.DiscretePiece.Type type = 3 [default = NORMAL];
inline bool ModelProto_DiscretePiece::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ModelProto_DiscretePiece::has_type() const {
  return _internal_has_type();
}
inline void ModelProto_DiscretePiece::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::discretepiece::ModelProto_DiscretePiece_Type ModelProto_DiscretePiece::_internal_type() const {
  return static_cast< ::discretepiece::ModelProto_DiscretePiece_Type >(type_);
}
inline ::discretepiece::ModelProto_DiscretePiece_Type ModelProto_DiscretePiece::type() const {
  // @@protoc_insertion_point(field_get:discretepiece.ModelProto.DiscretePiece.type)
  return _internal_type();
}
inline void ModelProto_DiscretePiece::_internal_set_type(::discretepiece::ModelProto_DiscretePiece_Type value) {
  assert(::discretepiece::ModelProto_DiscretePiece_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void ModelProto_DiscretePiece::set_type(::discretepiece::ModelProto_DiscretePiece_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:discretepiece.ModelProto.DiscretePiece.type)
}

// -------------------------------------------------------------------

// ModelProto

// repeated .discretepiece.ModelProto.DiscretePiece pieces = 1;
inline int ModelProto::_internal_pieces_size() const {
  return pieces_.size();
}
inline int ModelProto::pieces_size() const {
  return _internal_pieces_size();
}
inline void ModelProto::clear_pieces() {
  pieces_.Clear();
}
inline ::discretepiece::ModelProto_DiscretePiece* ModelProto::mutable_pieces(int index) {
  // @@protoc_insertion_point(field_mutable:discretepiece.ModelProto.pieces)
  return pieces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::discretepiece::ModelProto_DiscretePiece >*
ModelProto::mutable_pieces() {
  // @@protoc_insertion_point(field_mutable_list:discretepiece.ModelProto.pieces)
  return &pieces_;
}
inline const ::discretepiece::ModelProto_DiscretePiece& ModelProto::_internal_pieces(int index) const {
  return pieces_.Get(index);
}
inline const ::discretepiece::ModelProto_DiscretePiece& ModelProto::pieces(int index) const {
  // @@protoc_insertion_point(field_get:discretepiece.ModelProto.pieces)
  return _internal_pieces(index);
}
inline ::discretepiece::ModelProto_DiscretePiece* ModelProto::_internal_add_pieces() {
  return pieces_.Add();
}
inline ::discretepiece::ModelProto_DiscretePiece* ModelProto::add_pieces() {
  // @@protoc_insertion_point(field_add:discretepiece.ModelProto.pieces)
  return _internal_add_pieces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::discretepiece::ModelProto_DiscretePiece >&
ModelProto::pieces() const {
  // @@protoc_insertion_point(field_list:discretepiece.ModelProto.pieces)
  return pieces_;
}

// optional .discretepiece.TrainerSpec trainer_spec = 2;
inline bool ModelProto::_internal_has_trainer_spec() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || trainer_spec_ != nullptr);
  return value;
}
inline bool ModelProto::has_trainer_spec() const {
  return _internal_has_trainer_spec();
}
inline void ModelProto::clear_trainer_spec() {
  if (trainer_spec_ != nullptr) trainer_spec_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::discretepiece::TrainerSpec& ModelProto::_internal_trainer_spec() const {
  const ::discretepiece::TrainerSpec* p = trainer_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::discretepiece::TrainerSpec&>(
      ::discretepiece::_TrainerSpec_default_instance_);
}
inline const ::discretepiece::TrainerSpec& ModelProto::trainer_spec() const {
  // @@protoc_insertion_point(field_get:discretepiece.ModelProto.trainer_spec)
  return _internal_trainer_spec();
}
inline void ModelProto::unsafe_arena_set_allocated_trainer_spec(
    ::discretepiece::TrainerSpec* trainer_spec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trainer_spec_);
  }
  trainer_spec_ = trainer_spec;
  if (trainer_spec) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:discretepiece.ModelProto.trainer_spec)
}
inline ::discretepiece::TrainerSpec* ModelProto::release_trainer_spec() {
  _has_bits_[0] &= ~0x00000001u;
  ::discretepiece::TrainerSpec* temp = trainer_spec_;
  trainer_spec_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::discretepiece::TrainerSpec* ModelProto::unsafe_arena_release_trainer_spec() {
  // @@protoc_insertion_point(field_release:discretepiece.ModelProto.trainer_spec)
  _has_bits_[0] &= ~0x00000001u;
  ::discretepiece::TrainerSpec* temp = trainer_spec_;
  trainer_spec_ = nullptr;
  return temp;
}
inline ::discretepiece::TrainerSpec* ModelProto::_internal_mutable_trainer_spec() {
  _has_bits_[0] |= 0x00000001u;
  if (trainer_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::discretepiece::TrainerSpec>(GetArena());
    trainer_spec_ = p;
  }
  return trainer_spec_;
}
inline ::discretepiece::TrainerSpec* ModelProto::mutable_trainer_spec() {
  // @@protoc_insertion_point(field_mutable:discretepiece.ModelProto.trainer_spec)
  return _internal_mutable_trainer_spec();
}
inline void ModelProto::set_allocated_trainer_spec(::discretepiece::TrainerSpec* trainer_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trainer_spec_;
  }
  if (trainer_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trainer_spec);
    if (message_arena != submessage_arena) {
      trainer_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trainer_spec, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trainer_spec_ = trainer_spec;
  // @@protoc_insertion_point(field_set_allocated:discretepiece.ModelProto.trainer_spec)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace discretepiece

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::discretepiece::TrainerSpec_ModelType> : ::std::true_type {};
template <> struct is_proto_enum< ::discretepiece::ModelProto_DiscretePiece_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_discretepiece_5fmodel_2eproto
